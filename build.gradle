import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
	id 'idea'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id "com.modrinth.minotaur" version "1.2.1"
	id 'net.researchgate.release' version '2.8.1'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "${project.archives_base_name}-${project.minecraft_version}"
version = project.mod_version
group = project.maven_group

repositories {
	maven { url = "https://maven.fabricmc.net" } // Fabric
	maven { url = "https://maven.shedaniel.me/" } // REI & Cloth Config
	maven {  // ModMenu
		url = 'https://maven.terraformersmc.com/'
		content {
			includeGroup "com.terraformersmc"
			includeGroup "dev.emi"
		}
	}
	maven {
		name = "Ladysnake Libs"
		url = "https://ladysnake.jfrog.io/artifactory/mods"
		content {
			includeGroup "dev.onyxstudios"
			includeGroup "dev.onyxstudios.cardinal-components-api"
		}
	}
	maven {
		url = uri("https://storage.googleapis.com/devan-maven/")
	}
	maven {
		name = "Nucleoid"
		url = "https://maven.nucleoid.xyz/"
		content {
			includeGroup "fr.catcore"
			includeGroup "xyz.nucleoid"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"

	// Trinkets
	modImplementation("dev.emi:trinkets:${project.trinkets_version}") {
		//transitive = false
	}

	modImplementation("fr.catcore:server-translations-api:${project.server_translations_api_version}")
	include("fr.catcore:server-translations-api:${project.server_translations_api_version}")

	implementation 'org.jetbrains:annotations:16.0.2'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

curseforge {
	if (project.hasProperty("cf.key")) {
		apiKey = project.findProperty("cf.key")

		project {
			id = "506536"
			changelog = "Check the GitHub for changes: https://github.com/JackFred2/LenientDeath"
			releaseType = "beta"

			addGameVersion "Fabric"
			addGameVersion "Java 17"

			project.game_versions.tokenize(",").each { addGameVersion it }

			mainArtifact(remapJar) {
				relations {
					requiredDependency("fabric-api")
					optionalDependency("modmenu")
					requiredDependency("cloth-config")
				}
				displayName = "${project.prefix} ${archivesBaseName}-${version}.jar"
			}

		}

		options {
			forgeGradleIntegration = false
		}
	}
}

task publishModrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
	onlyIf {
		project.hasProperty("modrinth.key")
	}

	versionType = VersionType.BETA
	token = project.findProperty("modrinth.key")
	projectId = "Bfi1KBJV"
	versionNumber = "mc${project.minecraft_version}-${project.mod_version}"
	versionName = "Lenient Death $project.mod_version"
	uploadFile = remapJar
	changelog = "Check the GitHub for changes: https://github.com/JackFred2/LenientDeath"
	project.game_versions.tokenize(",").each { addGameVersion it }
	addLoader('fabric')
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
